---
interface Props {
  label?: string;
  before: string;  // z.B. "/gallery/terrasse-vorher.jpg"
  after: string;   // z.B. "/gallery/terrasse-nachher.jpg"
  altBefore: string;
  altAfter: string;
  width?: number;   // optional: hilft Layout-Shift zu vermeiden
  height?: number;  // optional
}
const {
  label = "Vorher / Nachher",
  before, after, altBefore, altAfter,
  width = 600, height = 450,
} = Astro.props;
const id = `ba-${Math.random().toString(36).slice(2,8)}`;
---

<div class="rounded-xl border border-slate-200 bg-white p-4 shadow-sm">
  <figcaption class="mb-3 text-sm font-medium text-slate-700">
    {label}
  </figcaption>

  <div class="relative select-none" style="--pos: 50%;">
    <!-- Bild-Container -->
    <div class="relative overflow-hidden rounded aspect-[4/3]">
      <!-- Nachher (unten, voll) -->
      <img src={after} alt={altAfter}
           width={width} height={height}
           class="absolute inset-0 h-full w-full object-cover" loading="lazy" />

      <!-- Vorher (oben, per Clip maskiert) -->
      <img src={before} alt={altBefore}
           width={width} height={height}
           class="absolute inset-0 h-full w-full object-cover [clip-path:inset(0_calc(100%-var(--pos))_0_0)] pointer-events-none" />
      <!-- Divider-Linie/Griff -->
      <div class="absolute inset-y-0"
           style="left: var(--pos);"
           aria-hidden="true">
        <div class="h-full w-px bg-white/70 shadow-[0_0_0_1px_rgba(0,0,0,0.15)]"></div>
        <div class="absolute top-1/2 -translate-y-1/2 -translate-x-1/2 rounded-full border border-slate-300 bg-white p-1 shadow">
          <svg viewBox="0 0 24 24" class="h-4 w-4" fill="none" stroke="currentColor">
            <path d="M8 12h8M12 8v8" stroke-width="2" stroke-linecap="round"/>
          </svg>
        </div>
      </div>
    </div>

    <!-- Range-Slider -->
    <input
      id={id}
      type="range" min="0" max="100" value="50"
      aria-label={`${label} Schieberegler`}
      class="absolute inset-x-3 bottom-3 h-1 appearance-none rounded bg-slate-200/80 outline-none
             [accent-color:theme(colors.blue.600)]"
      style="--tw-shadow: none;"
    />
  </div>
</div>

<script is:inline>
  // lokaler Initializer (funktioniert auch mit HMR)
  (function(){
    const root = document.currentScript?.previousElementSibling?.previousElementSibling || null;
    if (!root) return;
    const range = root.querySelector('input[type="range"]');
    const box = root.querySelector('.relative.overflow-hidden');
    if (!range || !box) return;
    const set = v => { root.style.setProperty('--pos', v + '%'); };

    // Drag via Range
    range.addEventListener('input', e => set(e.target.value));

    // Klick/Drag auf BildflÃ¤che
    box.addEventListener('pointerdown', e => {
      box.setPointerCapture(e.pointerId);
      const move = (ev) => {
        const rect = box.getBoundingClientRect();
        const x = ((ev.clientX - rect.left) / rect.width) * 100;
        const clamped = Math.min(100, Math.max(0, x));
        range.value = String(clamped);
        set(clamped);
      };
      move(e);
      const up = () => {
        box.removeEventListener('pointermove', move);
        box.removeEventListener('pointerup', up);
        box.releasePointerCapture(e.pointerId);
      };
      box.addEventListener('pointermove', move);
      box.addEventListener('pointerup', up, { once:true });
    });
  })();
</script>
