---
interface Props {
  label?: string;
  before: string;
  after: string;
  altBefore: string;
  altAfter: string;
  width?: number;
  height?: number;
}
const {
  label = "Vorher / Nachher",
  before, after, altBefore, altAfter,
  width = 600, height = 450,
} = Astro.props;
---

<figure class="rounded-xl border border-slate-200 bg-white p-4 shadow-sm">
  <figcaption class="mb-3 text-sm font-medium text-slate-700">
    {label}
  </figcaption>

  <!-- HOST: hier liegt die CSS-Variable --pos -->
  <div class="relative select-none" data-ba-host style="--pos: 50%;">
    <!-- BOX: Bildfläche -->
    <div class="relative overflow-hidden rounded aspect-[4/3]" data-ba-box>
      <!-- Nachher (unten, voll) -->
      <img
        src={after} alt="" aria-hidden="true"
        width={width} height={height}
        class="absolute inset-0 h-full w-full object-cover"
        loading="lazy"
      />
      <!-- Vorher (oben, per clip-path maskiert) -->
      <img
        src={before} alt="" aria-hidden="true"
        width={width} height={height}
        class="absolute inset-0 h-full w-full object-cover pointer-events-none"
        style="clip-path: inset(0 calc(100% - var(--pos)) 0 0);"
      />

      <!-- Divider-Linie + Griff -->
      <div class="absolute inset-y-0" style="left: var(--pos);" aria-hidden="true">
        <div class="h-full w-px bg-white/70 shadow-[0_0_0_1px_rgba(0,0,0,0.15)]"></div>
        <!-- <div class="absolute top-1/2 -translate-y-1/2 -translate-x-1/2 rounded-full border border-slate-300 bg-white p-1 shadow">
          <svg viewBox="0 0 24 24" class="h-4 w-4" fill="none" stroke="currentColor">
            <path d="M8 12h8M12 8v8" stroke-width="2" stroke-linecap="round"/>
          </svg>
        </div> -->
      </div>
    </div>

    <!-- Range-Steuerung -->
    <input
      type="range" min="0" max="100" value="50"
      aria-label={`${label} Schieberegler`}
      class="absolute inset-x-3 bottom-3 h-1 appearance-none rounded bg-slate-200/80 outline-none"
    />
  </div>
</figure>

<script is:inline>
  (function(){
    const fig = document.currentScript?.previousElementSibling || null;
    if (!fig) return;
    const host = fig.querySelector('[data-ba-host]');
    const box  = fig.querySelector('[data-ba-box]');
    const range = fig.querySelector('input[type="range"]');
    if (!host || !box || !range) return;

    const set = (v) => host.style.setProperty('--pos', v + '%');

    // Slider bewegt den Divider
    range.addEventListener('input', (e) => {
      set(e.target.value);
    });

    // Klick/Drag auf die Bildfläche
    box.addEventListener('pointerdown', (e) => {
      box.setPointerCapture(e.pointerId);
      const move = (ev) => {
        const r = box.getBoundingClientRect();
        const x = ((ev.clientX - r.left) / r.width) * 100;
        const v = Math.min(100, Math.max(0, x));
        range.value = String(v);
        set(v);
      };
      move(e);
      const up = () => {
        box.removeEventListener('pointermove', move);
        box.removeEventListener('pointerup', up);
        box.releasePointerCapture(e.pointerId);
      };
      box.addEventListener('pointermove', move);
      box.addEventListener('pointerup', up, { once: true });
    });
  })();
</script>
